# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldOutput
  bio: String
  adresse: String
  ville: String
  password: PasswordState
  createdAt: DateTime
  avis(where: AviWhereInput! = {}, orderBy: [AviOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AviWhereUniqueInput): [Avi!]
  avisCount(where: AviWhereInput! = {}): Int
  voitures(where: VoitureWhereInput! = {}, orderBy: [VoitureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoitureWhereUniqueInput): [Voiture!]
  voituresCount(where: VoitureWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
  naissance: CalendarDay
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nom: StringFilter
  prenom: StringFilter
  telephone: IntNullableFilter
  piece: IntNullableFilter
  email: StringFilter
  naissance: CalendarDayNullableFilter
  bio: StringFilter
  adresse: StringFilter
  ville: StringFilter
  createdAt: DateTimeNullableFilter
  avis: AviManyRelationFilter
  voitures: VoitureManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AviManyRelationFilter {
  every: AviWhereInput
  some: AviWhereInput
  none: AviWhereInput
}

input VoitureManyRelationFilter {
  every: VoitureWhereInput
  some: VoitureWhereInput
  none: VoitureWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nom: OrderDirection
  prenom: OrderDirection
  telephone: OrderDirection
  piece: OrderDirection
  email: OrderDirection
  naissance: OrderDirection
  bio: OrderDirection
  adresse: OrderDirection
  ville: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForUpdateInput
  voitures: VoitureRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AviRelateToManyForUpdateInput {
  disconnect: [AviWhereUniqueInput!]
  set: [AviWhereUniqueInput!]
  create: [AviCreateInput!]
  connect: [AviWhereUniqueInput!]
}

input VoitureRelateToManyForUpdateInput {
  disconnect: [VoitureWhereUniqueInput!]
  set: [VoitureWhereUniqueInput!]
  create: [VoitureCreateInput!]
  connect: [VoitureWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForCreateInput
  voitures: VoitureRelateToManyForCreateInput
}

input AviRelateToManyForCreateInput {
  create: [AviCreateInput!]
  connect: [AviWhereUniqueInput!]
}

input VoitureRelateToManyForCreateInput {
  create: [VoitureCreateInput!]
  connect: [VoitureWhereUniqueInput!]
}

type Chauffeur {
  id: ID!
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldOutput
  bio: String
  adresse: String
  ville: String
  password: PasswordState
  createdAt: DateTime
  avis(where: AviWhereInput! = {}, orderBy: [AviOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AviWhereUniqueInput): [Avi!]
  avisCount(where: AviWhereInput! = {}): Int
  voitures(where: VoitureWhereInput! = {}, orderBy: [VoitureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoitureWhereUniqueInput): [Voiture!]
  voituresCount(where: VoitureWhereInput! = {}): Int
  permis: String
  trajets(where: TrajetWhereInput! = {}, orderBy: [TrajetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrajetWhereUniqueInput): [Trajet!]
  trajetsCount(where: TrajetWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input ChauffeurWhereUniqueInput {
  id: ID
  email: String
  naissance: CalendarDay
}

input ChauffeurWhereInput {
  AND: [ChauffeurWhereInput!]
  OR: [ChauffeurWhereInput!]
  NOT: [ChauffeurWhereInput!]
  id: IDFilter
  name: StringFilter
  nom: StringFilter
  prenom: StringFilter
  telephone: IntNullableFilter
  piece: IntNullableFilter
  email: StringFilter
  naissance: CalendarDayNullableFilter
  bio: StringFilter
  adresse: StringFilter
  ville: StringFilter
  createdAt: DateTimeNullableFilter
  avis: AviManyRelationFilter
  voitures: VoitureManyRelationFilter
  permis: StringFilter
  trajets: TrajetManyRelationFilter
  posts: PostManyRelationFilter
}

input TrajetManyRelationFilter {
  every: TrajetWhereInput
  some: TrajetWhereInput
  none: TrajetWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ChauffeurOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nom: OrderDirection
  prenom: OrderDirection
  telephone: OrderDirection
  piece: OrderDirection
  email: OrderDirection
  naissance: OrderDirection
  bio: OrderDirection
  adresse: OrderDirection
  ville: OrderDirection
  createdAt: OrderDirection
  permis: OrderDirection
}

input ChauffeurUpdateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForUpdateInput
  voitures: VoitureRelateToManyForUpdateInput
  permis: String
  trajets: TrajetRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
}

input TrajetRelateToManyForUpdateInput {
  disconnect: [TrajetWhereUniqueInput!]
  set: [TrajetWhereUniqueInput!]
  create: [TrajetCreateInput!]
  connect: [TrajetWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ChauffeurUpdateArgs {
  where: ChauffeurWhereUniqueInput!
  data: ChauffeurUpdateInput!
}

input ChauffeurCreateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForCreateInput
  voitures: VoitureRelateToManyForCreateInput
  permis: String
  trajets: TrajetRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
}

input TrajetRelateToManyForCreateInput {
  create: [TrajetCreateInput!]
  connect: [TrajetWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Voiture {
  id: ID!
  plaque: String
  color: String
  marque: String
  model: String
  years: String
  user: User
}

input VoitureWhereUniqueInput {
  id: ID
}

input VoitureWhereInput {
  AND: [VoitureWhereInput!]
  OR: [VoitureWhereInput!]
  NOT: [VoitureWhereInput!]
  id: IDFilter
  plaque: StringFilter
  color: StringNullableFilter
  marque: StringNullableFilter
  model: StringNullableFilter
  years: StringFilter
  user: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input VoitureOrderByInput {
  id: OrderDirection
  plaque: OrderDirection
  color: OrderDirection
  marque: OrderDirection
  model: OrderDirection
  years: OrderDirection
}

input VoitureUpdateInput {
  plaque: String
  color: String
  marque: String
  model: String
  years: String
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input VoitureUpdateArgs {
  where: VoitureWhereUniqueInput!
  data: VoitureUpdateInput!
}

input VoitureCreateInput {
  plaque: String
  color: String
  marque: String
  model: String
  years: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: Chauffeur
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: ChauffeurWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: ChauffeurRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ChauffeurRelateToOneForUpdateInput {
  create: ChauffeurCreateInput
  connect: ChauffeurWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: ChauffeurRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ChauffeurRelateToOneForCreateInput {
  create: ChauffeurCreateInput
  connect: ChauffeurWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Trajet {
  id: ID!
  position_depart: String
  position_arrive: String
  date_depart: CalendarDay
  date_arrive: CalendarDay
  heure_depart: DateTime
  heure_arrive: DateTime
  nbre_place: Int
  chauffeur: Chauffeur
  avis(where: AviWhereInput! = {}, orderBy: [AviOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AviWhereUniqueInput): [Avi!]
  avisCount(where: AviWhereInput! = {}): Int
  reservations(where: ReservationWhereInput! = {}, orderBy: [ReservationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReservationWhereUniqueInput): [Reservation!]
  reservationsCount(where: ReservationWhereInput! = {}): Int
  gare: Gare
  escales(where: EscaleWhereInput! = {}, orderBy: [EscaleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EscaleWhereUniqueInput): [Escale!]
  escalesCount(where: EscaleWhereInput! = {}): Int
  chemin: Chemin
  paiement: Paiement
}

input TrajetWhereUniqueInput {
  id: ID
}

input TrajetWhereInput {
  AND: [TrajetWhereInput!]
  OR: [TrajetWhereInput!]
  NOT: [TrajetWhereInput!]
  id: IDFilter
  position_depart: StringFilter
  position_arrive: StringFilter
  date_depart: CalendarDayFilter
  date_arrive: CalendarDayFilter
  heure_depart: DateTimeFilter
  heure_arrive: DateTimeFilter
  nbre_place: IntFilter
  chauffeur: ChauffeurWhereInput
  avis: AviManyRelationFilter
  reservations: ReservationManyRelationFilter
  gare: GareWhereInput
  escales: EscaleManyRelationFilter
  chemin: CheminWhereInput
  paiement: PaiementWhereInput
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ReservationManyRelationFilter {
  every: ReservationWhereInput
  some: ReservationWhereInput
  none: ReservationWhereInput
}

input EscaleManyRelationFilter {
  every: EscaleWhereInput
  some: EscaleWhereInput
  none: EscaleWhereInput
}

input TrajetOrderByInput {
  id: OrderDirection
  position_depart: OrderDirection
  position_arrive: OrderDirection
  date_depart: OrderDirection
  date_arrive: OrderDirection
  heure_depart: OrderDirection
  heure_arrive: OrderDirection
  nbre_place: OrderDirection
}

input TrajetUpdateInput {
  position_depart: String
  position_arrive: String
  date_depart: CalendarDay
  date_arrive: CalendarDay
  heure_depart: DateTime
  heure_arrive: DateTime
  nbre_place: Int
  chauffeur: ChauffeurRelateToOneForUpdateInput
  avis: AviRelateToManyForUpdateInput
  reservations: ReservationRelateToManyForUpdateInput
  gare: GareRelateToOneForUpdateInput
  escales: EscaleRelateToManyForUpdateInput
  chemin: CheminRelateToOneForUpdateInput
  paiement: PaiementRelateToOneForUpdateInput
}

input ReservationRelateToManyForUpdateInput {
  disconnect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

input GareRelateToOneForUpdateInput {
  create: GareCreateInput
  connect: GareWhereUniqueInput
  disconnect: Boolean
}

input EscaleRelateToManyForUpdateInput {
  disconnect: [EscaleWhereUniqueInput!]
  set: [EscaleWhereUniqueInput!]
  create: [EscaleCreateInput!]
  connect: [EscaleWhereUniqueInput!]
}

input CheminRelateToOneForUpdateInput {
  create: CheminCreateInput
  connect: CheminWhereUniqueInput
  disconnect: Boolean
}

input PaiementRelateToOneForUpdateInput {
  create: PaiementCreateInput
  connect: PaiementWhereUniqueInput
  disconnect: Boolean
}

input TrajetUpdateArgs {
  where: TrajetWhereUniqueInput!
  data: TrajetUpdateInput!
}

input TrajetCreateInput {
  position_depart: String
  position_arrive: String
  date_depart: CalendarDay
  date_arrive: CalendarDay
  heure_depart: DateTime
  heure_arrive: DateTime
  nbre_place: Int
  chauffeur: ChauffeurRelateToOneForCreateInput
  avis: AviRelateToManyForCreateInput
  reservations: ReservationRelateToManyForCreateInput
  gare: GareRelateToOneForCreateInput
  escales: EscaleRelateToManyForCreateInput
  chemin: CheminRelateToOneForCreateInput
  paiement: PaiementRelateToOneForCreateInput
}

input ReservationRelateToManyForCreateInput {
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

input GareRelateToOneForCreateInput {
  create: GareCreateInput
  connect: GareWhereUniqueInput
}

input EscaleRelateToManyForCreateInput {
  create: [EscaleCreateInput!]
  connect: [EscaleWhereUniqueInput!]
}

input CheminRelateToOneForCreateInput {
  create: CheminCreateInput
  connect: CheminWhereUniqueInput
}

input PaiementRelateToOneForCreateInput {
  create: PaiementCreateInput
  connect: PaiementWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Chemin {
  id: ID!
  duree: DateTime
  peage: String
  estimation_prix: Float
  trajets(where: TrajetWhereInput! = {}, orderBy: [TrajetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrajetWhereUniqueInput): [Trajet!]
  trajetsCount(where: TrajetWhereInput! = {}): Int
  autoroutes(where: AutorouteWhereInput! = {}, orderBy: [AutorouteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AutorouteWhereUniqueInput): [Autoroute!]
  autoroutesCount(where: AutorouteWhereInput! = {}): Int
}

input CheminWhereUniqueInput {
  id: ID
}

input CheminWhereInput {
  AND: [CheminWhereInput!]
  OR: [CheminWhereInput!]
  NOT: [CheminWhereInput!]
  id: IDFilter
  duree: DateTimeFilter
  peage: StringFilter
  estimation_prix: FloatFilter
  trajets: TrajetManyRelationFilter
  autoroutes: AutorouteManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input AutorouteManyRelationFilter {
  every: AutorouteWhereInput
  some: AutorouteWhereInput
  none: AutorouteWhereInput
}

input CheminOrderByInput {
  id: OrderDirection
  duree: OrderDirection
  peage: OrderDirection
  estimation_prix: OrderDirection
}

input CheminUpdateInput {
  duree: DateTime
  peage: String
  estimation_prix: Float
  trajets: TrajetRelateToManyForUpdateInput
  autoroutes: AutorouteRelateToManyForUpdateInput
}

input AutorouteRelateToManyForUpdateInput {
  disconnect: [AutorouteWhereUniqueInput!]
  set: [AutorouteWhereUniqueInput!]
  create: [AutorouteCreateInput!]
  connect: [AutorouteWhereUniqueInput!]
}

input CheminUpdateArgs {
  where: CheminWhereUniqueInput!
  data: CheminUpdateInput!
}

input CheminCreateInput {
  duree: DateTime
  peage: String
  estimation_prix: Float
  trajets: TrajetRelateToManyForCreateInput
  autoroutes: AutorouteRelateToManyForCreateInput
}

input AutorouteRelateToManyForCreateInput {
  create: [AutorouteCreateInput!]
  connect: [AutorouteWhereUniqueInput!]
}

type Gare {
  id: ID!
  libelle: String
  trajets(where: TrajetWhereInput! = {}, orderBy: [TrajetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrajetWhereUniqueInput): [Trajet!]
  trajetsCount(where: TrajetWhereInput! = {}): Int
}

input GareWhereUniqueInput {
  id: ID
}

input GareWhereInput {
  AND: [GareWhereInput!]
  OR: [GareWhereInput!]
  NOT: [GareWhereInput!]
  id: IDFilter
  libelle: StringFilter
  trajets: TrajetManyRelationFilter
}

input GareOrderByInput {
  id: OrderDirection
  libelle: OrderDirection
}

input GareUpdateInput {
  libelle: String
  trajets: TrajetRelateToManyForUpdateInput
}

input GareUpdateArgs {
  where: GareWhereUniqueInput!
  data: GareUpdateInput!
}

input GareCreateInput {
  libelle: String
  trajets: TrajetRelateToManyForCreateInput
}

type Escale {
  id: ID!
  libelle: String
  trajets(where: TrajetWhereInput! = {}, orderBy: [TrajetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrajetWhereUniqueInput): [Trajet!]
  trajetsCount(where: TrajetWhereInput! = {}): Int
}

input EscaleWhereUniqueInput {
  id: ID
}

input EscaleWhereInput {
  AND: [EscaleWhereInput!]
  OR: [EscaleWhereInput!]
  NOT: [EscaleWhereInput!]
  id: IDFilter
  libelle: StringFilter
  trajets: TrajetManyRelationFilter
}

input EscaleOrderByInput {
  id: OrderDirection
  libelle: OrderDirection
}

input EscaleUpdateInput {
  libelle: String
  trajets: TrajetRelateToManyForUpdateInput
}

input EscaleUpdateArgs {
  where: EscaleWhereUniqueInput!
  data: EscaleUpdateInput!
}

input EscaleCreateInput {
  libelle: String
  trajets: TrajetRelateToManyForCreateInput
}

type Autoroute {
  id: ID!
  libelle: String
  chemins(where: CheminWhereInput! = {}, orderBy: [CheminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheminWhereUniqueInput): [Chemin!]
  cheminsCount(where: CheminWhereInput! = {}): Int
}

input AutorouteWhereUniqueInput {
  id: ID
}

input AutorouteWhereInput {
  AND: [AutorouteWhereInput!]
  OR: [AutorouteWhereInput!]
  NOT: [AutorouteWhereInput!]
  id: IDFilter
  libelle: StringFilter
  chemins: CheminManyRelationFilter
}

input CheminManyRelationFilter {
  every: CheminWhereInput
  some: CheminWhereInput
  none: CheminWhereInput
}

input AutorouteOrderByInput {
  id: OrderDirection
  libelle: OrderDirection
}

input AutorouteUpdateInput {
  libelle: String
  chemins: CheminRelateToManyForUpdateInput
}

input CheminRelateToManyForUpdateInput {
  disconnect: [CheminWhereUniqueInput!]
  set: [CheminWhereUniqueInput!]
  create: [CheminCreateInput!]
  connect: [CheminWhereUniqueInput!]
}

input AutorouteUpdateArgs {
  where: AutorouteWhereUniqueInput!
  data: AutorouteUpdateInput!
}

input AutorouteCreateInput {
  libelle: String
  chemins: CheminRelateToManyForCreateInput
}

input CheminRelateToManyForCreateInput {
  create: [CheminCreateInput!]
  connect: [CheminWhereUniqueInput!]
}

type Paiement {
  id: ID!
  type: String
  status: String
  montant: Float
  date: CalendarDay
  trajet: Trajet
}

input PaiementWhereUniqueInput {
  id: ID
  date: CalendarDay
}

input PaiementWhereInput {
  AND: [PaiementWhereInput!]
  OR: [PaiementWhereInput!]
  NOT: [PaiementWhereInput!]
  id: IDFilter
  type: StringFilter
  status: StringNullableFilter
  montant: FloatFilter
  date: CalendarDayFilter
  trajet: TrajetWhereInput
}

input PaiementOrderByInput {
  id: OrderDirection
  type: OrderDirection
  status: OrderDirection
  montant: OrderDirection
  date: OrderDirection
}

input PaiementUpdateInput {
  type: String
  status: String
  montant: Float
  date: CalendarDay
  trajet: TrajetRelateToOneForUpdateInput
}

input TrajetRelateToOneForUpdateInput {
  create: TrajetCreateInput
  connect: TrajetWhereUniqueInput
  disconnect: Boolean
}

input PaiementUpdateArgs {
  where: PaiementWhereUniqueInput!
  data: PaiementUpdateInput!
}

input PaiementCreateInput {
  type: String
  status: String
  montant: Float
  date: CalendarDay
  trajet: TrajetRelateToOneForCreateInput
}

input TrajetRelateToOneForCreateInput {
  create: TrajetCreateInput
  connect: TrajetWhereUniqueInput
}

type Reservation {
  id: ID!
  date: CalendarDay
  nbre_place: Int
  trajet: Trajet
  voyageur: Voyageur
}

input ReservationWhereUniqueInput {
  id: ID
  date: CalendarDay
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  date: CalendarDayFilter
  nbre_place: IntFilter
  trajet: TrajetWhereInput
  voyageur: VoyageurWhereInput
}

input ReservationOrderByInput {
  id: OrderDirection
  date: OrderDirection
  nbre_place: OrderDirection
}

input ReservationUpdateInput {
  date: CalendarDay
  nbre_place: Int
  trajet: TrajetRelateToOneForUpdateInput
  voyageur: VoyageurRelateToOneForUpdateInput
}

input VoyageurRelateToOneForUpdateInput {
  create: VoyageurCreateInput
  connect: VoyageurWhereUniqueInput
  disconnect: Boolean
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  date: CalendarDay
  nbre_place: Int
  trajet: TrajetRelateToOneForCreateInput
  voyageur: VoyageurRelateToOneForCreateInput
}

input VoyageurRelateToOneForCreateInput {
  create: VoyageurCreateInput
  connect: VoyageurWhereUniqueInput
}

type Avi {
  id: ID!
  note: Decimal
  reste: Decimal
  user: User
  trajet: Trajet
}

scalar Decimal

input AviWhereUniqueInput {
  id: ID
}

input AviWhereInput {
  AND: [AviWhereInput!]
  OR: [AviWhereInput!]
  NOT: [AviWhereInput!]
  id: IDFilter
  note: DecimalFilter
  reste: DecimalFilter
  user: UserWhereInput
  trajet: TrajetWhereInput
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input AviOrderByInput {
  id: OrderDirection
  note: OrderDirection
  reste: OrderDirection
}

input AviUpdateInput {
  note: Decimal
  reste: Decimal
  user: UserRelateToOneForUpdateInput
  trajet: TrajetRelateToOneForUpdateInput
}

input AviUpdateArgs {
  where: AviWhereUniqueInput!
  data: AviUpdateInput!
}

input AviCreateInput {
  note: Decimal
  reste: Decimal
  user: UserRelateToOneForCreateInput
  trajet: TrajetRelateToOneForCreateInput
}

type Voyageur {
  id: ID!
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldOutput
  bio: String
  adresse: String
  ville: String
  password: PasswordState
  createdAt: DateTime
  avis(where: AviWhereInput! = {}, orderBy: [AviOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AviWhereUniqueInput): [Avi!]
  avisCount(where: AviWhereInput! = {}): Int
  voitures(where: VoitureWhereInput! = {}, orderBy: [VoitureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoitureWhereUniqueInput): [Voiture!]
  voituresCount(where: VoitureWhereInput! = {}): Int
  reservations(where: ReservationWhereInput! = {}, orderBy: [ReservationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReservationWhereUniqueInput): [Reservation!]
  reservationsCount(where: ReservationWhereInput! = {}): Int
}

input VoyageurWhereUniqueInput {
  id: ID
  email: String
  naissance: CalendarDay
}

input VoyageurWhereInput {
  AND: [VoyageurWhereInput!]
  OR: [VoyageurWhereInput!]
  NOT: [VoyageurWhereInput!]
  id: IDFilter
  name: StringFilter
  nom: StringFilter
  prenom: StringFilter
  telephone: IntNullableFilter
  piece: IntNullableFilter
  email: StringFilter
  naissance: CalendarDayNullableFilter
  bio: StringFilter
  adresse: StringFilter
  ville: StringFilter
  createdAt: DateTimeNullableFilter
  avis: AviManyRelationFilter
  voitures: VoitureManyRelationFilter
  reservations: ReservationManyRelationFilter
}

input VoyageurOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nom: OrderDirection
  prenom: OrderDirection
  telephone: OrderDirection
  piece: OrderDirection
  email: OrderDirection
  naissance: OrderDirection
  bio: OrderDirection
  adresse: OrderDirection
  ville: OrderDirection
  createdAt: OrderDirection
}

input VoyageurUpdateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForUpdateInput
  voitures: VoitureRelateToManyForUpdateInput
  reservations: ReservationRelateToManyForUpdateInput
}

input VoyageurUpdateArgs {
  where: VoyageurWhereUniqueInput!
  data: VoyageurUpdateInput!
}

input VoyageurCreateInput {
  name: String
  nom: String
  prenom: String
  telephone: Int
  piece: Int
  email: String
  naissance: CalendarDay
  photo: ImageFieldInput
  bio: String
  adresse: String
  ville: String
  password: String
  createdAt: DateTime
  avis: AviRelateToManyForCreateInput
  voitures: VoitureRelateToManyForCreateInput
  reservations: ReservationRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createChauffeur(data: ChauffeurCreateInput!): Chauffeur
  createChauffeurs(data: [ChauffeurCreateInput!]!): [Chauffeur]
  updateChauffeur(where: ChauffeurWhereUniqueInput!, data: ChauffeurUpdateInput!): Chauffeur
  updateChauffeurs(data: [ChauffeurUpdateArgs!]!): [Chauffeur]
  deleteChauffeur(where: ChauffeurWhereUniqueInput!): Chauffeur
  deleteChauffeurs(where: [ChauffeurWhereUniqueInput!]!): [Chauffeur]
  createVoiture(data: VoitureCreateInput!): Voiture
  createVoitures(data: [VoitureCreateInput!]!): [Voiture]
  updateVoiture(where: VoitureWhereUniqueInput!, data: VoitureUpdateInput!): Voiture
  updateVoitures(data: [VoitureUpdateArgs!]!): [Voiture]
  deleteVoiture(where: VoitureWhereUniqueInput!): Voiture
  deleteVoitures(where: [VoitureWhereUniqueInput!]!): [Voiture]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTrajet(data: TrajetCreateInput!): Trajet
  createTrajets(data: [TrajetCreateInput!]!): [Trajet]
  updateTrajet(where: TrajetWhereUniqueInput!, data: TrajetUpdateInput!): Trajet
  updateTrajets(data: [TrajetUpdateArgs!]!): [Trajet]
  deleteTrajet(where: TrajetWhereUniqueInput!): Trajet
  deleteTrajets(where: [TrajetWhereUniqueInput!]!): [Trajet]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createChemin(data: CheminCreateInput!): Chemin
  createChemins(data: [CheminCreateInput!]!): [Chemin]
  updateChemin(where: CheminWhereUniqueInput!, data: CheminUpdateInput!): Chemin
  updateChemins(data: [CheminUpdateArgs!]!): [Chemin]
  deleteChemin(where: CheminWhereUniqueInput!): Chemin
  deleteChemins(where: [CheminWhereUniqueInput!]!): [Chemin]
  createGare(data: GareCreateInput!): Gare
  createGares(data: [GareCreateInput!]!): [Gare]
  updateGare(where: GareWhereUniqueInput!, data: GareUpdateInput!): Gare
  updateGares(data: [GareUpdateArgs!]!): [Gare]
  deleteGare(where: GareWhereUniqueInput!): Gare
  deleteGares(where: [GareWhereUniqueInput!]!): [Gare]
  createEscale(data: EscaleCreateInput!): Escale
  createEscales(data: [EscaleCreateInput!]!): [Escale]
  updateEscale(where: EscaleWhereUniqueInput!, data: EscaleUpdateInput!): Escale
  updateEscales(data: [EscaleUpdateArgs!]!): [Escale]
  deleteEscale(where: EscaleWhereUniqueInput!): Escale
  deleteEscales(where: [EscaleWhereUniqueInput!]!): [Escale]
  createAutoroute(data: AutorouteCreateInput!): Autoroute
  createAutoroutes(data: [AutorouteCreateInput!]!): [Autoroute]
  updateAutoroute(where: AutorouteWhereUniqueInput!, data: AutorouteUpdateInput!): Autoroute
  updateAutoroutes(data: [AutorouteUpdateArgs!]!): [Autoroute]
  deleteAutoroute(where: AutorouteWhereUniqueInput!): Autoroute
  deleteAutoroutes(where: [AutorouteWhereUniqueInput!]!): [Autoroute]
  createPaiement(data: PaiementCreateInput!): Paiement
  createPaiements(data: [PaiementCreateInput!]!): [Paiement]
  updatePaiement(where: PaiementWhereUniqueInput!, data: PaiementUpdateInput!): Paiement
  updatePaiements(data: [PaiementUpdateArgs!]!): [Paiement]
  deletePaiement(where: PaiementWhereUniqueInput!): Paiement
  deletePaiements(where: [PaiementWhereUniqueInput!]!): [Paiement]
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(where: ReservationWhereUniqueInput!, data: ReservationUpdateInput!): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createAvi(data: AviCreateInput!): Avi
  createAvis(data: [AviCreateInput!]!): [Avi]
  updateAvi(where: AviWhereUniqueInput!, data: AviUpdateInput!): Avi
  updateAvis(data: [AviUpdateArgs!]!): [Avi]
  deleteAvi(where: AviWhereUniqueInput!): Avi
  deleteAvis(where: [AviWhereUniqueInput!]!): [Avi]
  createVoyageur(data: VoyageurCreateInput!): Voyageur
  createVoyageurs(data: [VoyageurCreateInput!]!): [Voyageur]
  updateVoyageur(where: VoyageurWhereUniqueInput!, data: VoyageurUpdateInput!): Voyageur
  updateVoyageurs(data: [VoyageurUpdateArgs!]!): [Voyageur]
  deleteVoyageur(where: VoyageurWhereUniqueInput!): Voyageur
  deleteVoyageurs(where: [VoyageurWhereUniqueInput!]!): [Voyageur]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  chauffeurs(where: ChauffeurWhereInput! = {}, orderBy: [ChauffeurOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChauffeurWhereUniqueInput): [Chauffeur!]
  chauffeur(where: ChauffeurWhereUniqueInput!): Chauffeur
  chauffeursCount(where: ChauffeurWhereInput! = {}): Int
  voitures(where: VoitureWhereInput! = {}, orderBy: [VoitureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoitureWhereUniqueInput): [Voiture!]
  voiture(where: VoitureWhereUniqueInput!): Voiture
  voituresCount(where: VoitureWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  trajets(where: TrajetWhereInput! = {}, orderBy: [TrajetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrajetWhereUniqueInput): [Trajet!]
  trajet(where: TrajetWhereUniqueInput!): Trajet
  trajetsCount(where: TrajetWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  chemins(where: CheminWhereInput! = {}, orderBy: [CheminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CheminWhereUniqueInput): [Chemin!]
  chemin(where: CheminWhereUniqueInput!): Chemin
  cheminsCount(where: CheminWhereInput! = {}): Int
  gares(where: GareWhereInput! = {}, orderBy: [GareOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GareWhereUniqueInput): [Gare!]
  gare(where: GareWhereUniqueInput!): Gare
  garesCount(where: GareWhereInput! = {}): Int
  escales(where: EscaleWhereInput! = {}, orderBy: [EscaleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EscaleWhereUniqueInput): [Escale!]
  escale(where: EscaleWhereUniqueInput!): Escale
  escalesCount(where: EscaleWhereInput! = {}): Int
  autoroutes(where: AutorouteWhereInput! = {}, orderBy: [AutorouteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AutorouteWhereUniqueInput): [Autoroute!]
  autoroute(where: AutorouteWhereUniqueInput!): Autoroute
  autoroutesCount(where: AutorouteWhereInput! = {}): Int
  paiements(where: PaiementWhereInput! = {}, orderBy: [PaiementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaiementWhereUniqueInput): [Paiement!]
  paiement(where: PaiementWhereUniqueInput!): Paiement
  paiementsCount(where: PaiementWhereInput! = {}): Int
  reservations(where: ReservationWhereInput! = {}, orderBy: [ReservationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReservationWhereUniqueInput): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  avis(where: AviWhereInput! = {}, orderBy: [AviOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AviWhereUniqueInput): [Avi!]
  avi(where: AviWhereUniqueInput!): Avi
  avisCount(where: AviWhereInput! = {}): Int
  voyageurs(where: VoyageurWhereInput! = {}, orderBy: [VoyageurOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoyageurWhereUniqueInput): [Voyageur!]
  voyageur(where: VoyageurWhereUniqueInput!): Voyageur
  voyageursCount(where: VoyageurWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
